name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test-runner:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_mingw81' # Verify the correct arch

      - name: Install MinGW
        run: choco install mingw -y

      - name: Add Qt and MinGW to PATH
        shell: powershell
        run: |
          $qtPath = 'C:\Qt\5.15.2\mingw81_64\bin'
          $mingwPath = 'C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin'
          [System.Environment]::SetEnvironmentVariable('PATH', "$qtPath;$mingwPath;$env:PATH", [System.EnvironmentVariableTarget]::Process)
          Write-Host "Qt and MinGW paths added to PATH: $qtPath, $mingwPath"
          
      - name: Verify Qt and MinGW installation
        shell: powershell
        run: |
          if (-Not (Get-Command qmake -ErrorAction SilentlyContinue)) {
            throw "qmake not found in PATH"
          }
          if (-Not (Get-Command mingw32-make -ErrorAction SilentlyContinue)) {
            throw "mingw32-make not found in PATH"
          }

      - name: Verify directory structure 
        shell: powershell
        run: Get-ChildItem -Recurse Project

      - name: Build project
        shell: powershell
        run: |
          cd Project
          qmake Application.pro
          mingw32-make

      - name: Verify moc.exe in PATH
        shell: cmd
        run: |
          moc -v


      - name: Generate MOC files
        shell: cmd
        run: |
         cd UNITTESTx
         moc ../Project/aiplayer.h -o moc_aiplayer.cpp
         moc tst_unittests.cpp -o tst_unittests.moc


      - name: Build unit tests
        shell: powershell
        run: |
          cd UNITTESTx
          qmake UNITTESTx.pro
          mingw32-make

      - name: List build directory contents
        shell: powershell
        run: |
          cd UNITTESTx
          Get-ChildItem -Recurse

      - name: Verify and log directory structure
        shell: powershell
        run: |
          cd UNITTESTx
          Get-ChildItem -Recurse
          if (-Not (Test-Path -Path "release")) {
            throw "Release directory does not exist"
          }
          Get-ChildItem -Path "release"

      - name: Run Tests
        shell: powershell
        continue-on-error: true
        run: |
          cd UNITTESTx/release
          ./UNITTESTx.exe > test_output.log 2>&1

      - name: Capture Test Output
        if: failure()
        shell: powershell
        run: |
          Write-Output "Test failed, capturing output..."
          Get-Content -Path UNITTESTx/release/test_output.log -Tail 100
          
      - name: Run executable
        shell: powershell
        run: |
          cd Project/build/Desktop_Qt_6_7_0_MinGW_64_bit-Debug/debug
          ./Application.exe
